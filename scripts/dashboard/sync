#!/bin/bash

set -e
cd $(dirname $0)

source ../../.env
source ../helper

CONFIG_PATH=./configs
panel_id=1

function load_panel {
  json=$1
  panel="$(cat $CONFIG_PATH/$json)"
  echo "$panel"
}

# Fetch the UID of our dashboard
dash_name="Helium Validator Dashboard"
response=$(grafana_api /api/search?query=$dash_name)
dash_uid=$(echo $response | jq -r -c --arg name "$dash_name" '[ .[] | select( .title | contains($name)) ][0].uid')

echo

if [[ $dash_uid == "null" ]] || [ -z $dash_uid ]; then
  echo "No Helium dashboard found. Creating a new one..."
  dash_uid=
else 
  response=$(grafana_api /api/dashboards/uid/$dash_uid)
  dash_version=$(echo $response | jq -r -c '[ .dashboard ][0].version')
  echo "Updating existing $dash_name (v$dash_version)"
fi

# Setup the dashboard
dashboard=$(load_panel dashboard.json)

# Enclose contents in {"dashboard":{}} to prep for api
dashboard=$(echo "$dashboard" | jq "{dashboard: . }")

# Automatically set the notification channel for all panels with alerts
notification_uid=
if [ ! -z $GRAFANA_NOTIFICATION_CHANNEL ]; then
  notification_uid=$(grafana_api /api/alert-notifications | jq -r ".[] | select(.id == $GRAFANA_NOTIFICATION_CHANNEL) | .uid")
  panels=$(echo "$dashboard" | jq ".dashboard.panels | map(if .alert.notifications != null then .alert.notifications = [{ uid: \"$notification_uid\" }] else . end)")
  dashboard=$(echo "$dashboard" | jq ".dashboard.panels |= $panels")
fi

# Delete the id
dashboard=$(echo "$dashboard" | jq ".dashboard.id = null")

if [ -z $dash_uid ]; then 
  # Delete these when creating a new dash
  dashboard=$(echo "$dashboard" | jq ".dashboard.uid = null")
  dashboard=$(echo "$dashboard" | jq ".dashboard.version = null")
else
  # Update existing dash
  dashboard=$(echo "$dashboard" | jq ".dashboard.uid = \"$dash_uid\"")
  dashboard=$(echo "$dashboard" | jq ".dashboard.version = $dash_version")
fi

# Save!
echo "$dashboard" >payload.json
grafana_api_post /api/dashboards/db @payload.json | jq
rm payload.json

# Add Helium Oracle price datasource
search="https://api.helium.io/v1/"
helium_datasource=$(grafana_api /api/datasources | jq -r --arg url "$search" '[.[] | select(.url | contains($url))][0].uid')
if [[ "$helium_datasource" == "null" ]]; then
  echo "Adding Helium API as a datasource"
  grafana_api_post /api/datasources @configs/helium-datasource.json | jq
fi

echo
echo "Updated! Visit your dashboard:"
echo "http://localhost:3000/d/$dash_uid" 
echo


