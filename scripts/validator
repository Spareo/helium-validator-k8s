#!/bin/bash
#
# Validator helper utility 
# update|info|peers|cg_perf|bash|logs|stake|reset_db|kickstart
#

cd $(dirname $0)

CMD=$1

source helper
source ../.env

if [[ $CMD == "info" ]]; then
  replica_id=$2
  start_index=0
  validator_count=$(kubectl get pods | grep -c "validator")

  if [ ! -z $replica_id ]; then
    start_index=$replica_id
    validator_count=$((replica_id + 1))
  fi

  for ((i = $start_index; i < $validator_count; i++)); do
    pod="validator-$i"
    echo; echo -e "${GREEN}Pod:${NC} $pod"

    name=$(get_miner_name $i)
    address=$(get_miner_address $i)
    echo -e "${GREEN}Name:${NC} $name"
    echo -e "${GREEN}Address:${NC} $address"
    echo -e "${GREEN}Version:${NC} $(container_validator_version $i)"
    echo -e "${GREEN}Validator API:${NC} https://api.helium.io/v1/validators/$address"
    echo -e "${GREEN}Explorer:${NC} https://explorer-beta.helium.com/validators/$address"

    in_consensus="$(is_in_consensus $i)"
    if [[ $in_consensus =~ "true" ]]; then
      echo "Consensus group performance: "
      kubectl exec -it $pod -c validator -n $NAMESPACE -- sh -c "miner hbbft perf | grep $name"
    else
      echo "Not currently in consensus group"
    fi

    # echo "Quay: $QUAY_URL"
    kubectl exec -it $pod -c validator -n $NAMESPACE -- sh -c "miner info p2p_status"
  done

elif [[ $CMD == "peers" ]]; then
  # FIXME DRY up this "with each validator" loop
  validator_count=$(kubectl get pods | grep -c "validator")
  for ((i = 0; i < $validator_count; i++)); do
    pod="validator-$i"
    echo; echo "Pod: $pod"
    kubectl exec -it $pod -c validator -- sh -c "miner peer book -s"
  done

elif [[ $CMD == "cg_perf" ]]; then
  # pass additional arguments through, like "--format=csv"
  shift
  kubectl exec -it validator-0 -c validator -- sh -c "miner hbbft perf $@"

elif [[ $CMD == "bash" ]]; then
  pod_id=$2
  kubectl exec -it validator-$pod_id -c validator -- /bin/ash

elif [[ $CMD == "logs" ]]; then
  pod_id=$2
  kubectl exec validator-$pod_id -c validator -- tail -F /var/data/log/{console,error,crash}.log

elif [[ $CMD == "stake" ]]; then
  pod_id=$2
  wallet_path=$3
  amount=$4
  pod="validator-$i"

  if [ -z $pod_id ]; then
    echo "$0: missing pod_id (aka pod replica number)"
    exit 1
  elif [ -z $wallet_path ]; then
    echo "$0: missing path to wallet"
    exit 1
  elif [ -z $amount ]; then
    echo "No amount specified, assuming 10,000 HNT"
    amount=10000
  fi

  address=$(get_miner_address $pod_id)
  echo; echo "Name: $(get_miner_name $pod_id)"
  echo "Address: $address"
  echo "Wallet path: $wallet_path"
  echo "Stake amount: $amount"

  helium-wallet -f $wallet_path validators stake one $address $amount --commit

  echo; echo "Staked! Visit https://testnet-api.helium.wtf/v1/validators/$address to see the status"

elif [[ $CMD == "reset_db" ]]; then
  pod_id=$2

  if [ -z $pod_id ]; then
    echo "$0: missing pod_id (aka pod replica number)"
    exit 1
  fi

  kubectl exec -it validator-$pod_id -c validator -- sh -c "cd /var/data; rm -rf *.db; rm -rf blockchain_swarm; rm -rf log; rm -rf lost+found;"
  kubectl delete pod validator-$pod_id &

elif [[ $CMD == "kickstart" ]]; then
  pod_id=$2
  kubectl exec -it validator-$pod_id -c validator -- sh -c "miner peer connect /ip4/3.137.173.26/tcp/2154"

elif [[ $CMD == "top" ]]; then
  kubectl top pods --all-namespaces

else
  echo "$0: unknown command \"$CMD\" - (info|peers|cg_perf|bash|logs|stake|reset_db|kickstart)"
  exit 1
fi
