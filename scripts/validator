#!/bin/bash

CMD=$1
QUAY_URL='https://quay.io/api/v1/repository/team-helium/validator/tag/?limit=20&page=1&onlyActiveTags=true'
ARCH=amd
POD_NAME=validator
CONTAINER_NAME=validator

container_validator_version()
{
  replica=$1
  kubectl exec -it $POD_NAME-$replica -c $CONTAINER_NAME -- /bin/sh -c "miner versions" | egrep -o "[0-9]+.[0-9]+.[0-9]+" | xargs
}

get_miner_name()
{
  pod_id=$1
  kubectl exec -it validator-$pod_id -c validator -- sh -c "miner info name" | egrep -o "[a-z]+-[a-z]+-[a-z]+" | xargs
}

get_miner_address()
{
  pod_id=$1
  
  kubectl exec -it validator-$pod_id -c validator -- sh -c "miner peer addr" | grep -oE "[0-9a-zA-Z]{6,}"
}

if [[ $CMD == "update" ]]; then
  miner_quay=$(curl -s "$QUAY_URL" --write-out '\nHTTP_Response:%{http_code}')
  miner_response=$(echo "$miner_quay" | grep "HTTP_Response" | cut -d":" -f2)

  if [[ $miner_response -ne 200 ]]; then
    echo "Bad Response from Server"
    exit 0
  fi

  miner_latest_name=$(echo "$miner_quay" | grep -v HTTP_Response | jq -c --arg ARCH "$ARCH" '[ .tags[] | select( .name | contains($ARCH)and contains("_val")) ][0].name' | cut -d'"' -f2)
  miner_latest_version=$(echo $miner_latest_name | egrep -o "[0-9]+.[0-9]+.[0-9]+" | xargs)
  container_version=$(container_validator_version 0)

  # echo $MINER_VERSION
  # echo $miner_quay
  # echo $miner_response
  # echo $miner_latest

  if [ -z "$container_version" ]; then
    echo "Validator is not up right now. Try again later"
    exit 0
  fi

  if [[ $miner_latest_version == $container_version ]]; then
    echo "Already at latest version: $container_version"
  else
    echo "Out of date!"
    echo "Latest version: $miner_latest_version"
    echo "Container version: $container_version"

    scripts/deploy restart
  fi

elif [[ $CMD == "info" ]]; then
  validator_count=$(kubectl get pods | grep -c "validator")
  for ((i = 0 ; i < $validator_count ; i++)); do
    pod="validator-$i"

    echo; echo "Pod: $pod"

    address=$(get_miner_address $i)
    echo "Name: $(get_miner_name $i)"
    echo "Address: $address"
    echo "Version: $(container_validator_version 0)"
    echo "In consensus: $(kubectl exec -it $pod -c validator -- sh -c "miner info in_consensus")"
    echo "Validator API: https://testnet-api.helium.wtf/v1/validators/$address"
    # echo "Quay: $QUAY_URL"

    kubectl exec -it $pod -c validator -- sh -c "miner info p2p_status && miner peer book -s"
  done

elif [[ $CMD == "bash" ]]; then
  pod_id=$2
  kubectl exec -it validator-$pod_id -c validator -- /bin/sh

elif [[ $CMD == "logs" ]]; then
  pod_id=$2
  kubectl exec validator-$pod_id -c validator -- tail -F /var/data/log/{console,error,crash}.log

elif [[ $CMD == "stake" ]]; then
  pod_id=$2
  wallet_path=$3
  amount=$4
  pod="validator-$i"

  if [ -z $pod_id ]; then
    echo "$0: missing pod_id (aka pod replica number)"
    exit 1
  elif [ -z $wallet_path ]; then 
    echo "$0: missing path to wallet"
    exit 1
  elif [ -z $amount ]; then 
    echo "$0: specify amount of TNT to stake"
    exit 1
  fi

  address=$(get_miner_address $pod_id)
  echo; echo "Name: $(get_miner_name $pod_id)"
  echo "Address: $address"
  echo "Wallet path: $wallet_path"
  echo "Stake amount: $amount"

  helium-wallet -f $wallet_path validators stake $address $amount --commit

  echo; echo "Staked! Visit https://testnet-api.helium.wtf/v1/validators/$address to see the status"

elif [[ $CMD == "reset_db" ]]; then
  pod_id=$2

  if [ -z $pod_id ]; then
    echo "$0: missing pod_id (aka pod replica number)"
    exit 1
  fi

  kubectl exec -it validator-$pod_id -c validator -- sh -c "cd /var/data; rm -rf *.db; rm -rf blockchain_swarm; rm -rf log; rm -rf lost+found;"
  kubectl delete pod validator-$pod_id &

elif [[ $CMD == "kickstart" ]]; then
  pod_id=$2
  kubectl exec -it validator-$pod_id -c validator -- sh -c "miner peer connect /ip4/3.137.173.26/tcp/2154"

else
  echo "$0: unknown command \"$CMD\" - (update|info|bash|logs|stake|reset_db|stake)"
  exit 1
fi